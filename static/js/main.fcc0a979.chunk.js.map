{"version":3,"sources":["app/components/displayIngredients/displayIngredients.js","app/views/user-list/userList.js","app/views/search-page/searchPage.js","app/views/recipe-page/recipePage.js","App.js","serviceWorker.js","index.js"],"names":["DisplayIngredients","ingredient","div","animate","opacity","transition","duration","delay","className","UserList","axios","require","SearchPage","recipe","setRecipe","history","useHistory","useState","userInput","setUserInput","ingredientsList","setIngredientsList","healthList","setHealthList","useEffect","console","log","style","padding","width","background","border","key","placeholder","value","onChange","e","target","margin","onClick","post","then","response","data","returnedJSONData","push","catch","error","map","RecipePage","Object","keys","recipeName","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fcc0a979.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./displayIngredients.scss\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\"\r\n\r\nfunction DisplayIngredients({ ingredient }) {\r\n  return (\r\n    <motion.div \r\n      animate={{\r\n        opacity: [0, 1],\r\n      }}\r\n      transition={{\r\n        duration: 0.2,\r\n        delay: 0.1\r\n      }}\r\n    className=\"displayIngredients\">\r\n        <h2>{ingredient}</h2>\r\n        \r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default DisplayIngredients;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./userList.scss\";\r\n\r\nimport axios from \"axios\"\r\n\r\nimport { UserCard } from \"app/components\";\r\n\r\nfunction UserList() {\r\n\r\n  // List of users from the database\r\n  const [users, setUsers] = useState(null);\r\n\r\n  // Get the list of users from the database upon page load\r\n  useEffect(() => {\r\n    getUserList();\r\n  }, []);\r\n\r\n  // Get the list of users through a GET request to the backend API\r\n  async function getUserList() {\r\n    let users = await axios.get(\"https://zothacks-2020-workshop.herokuapp.com/user\");\r\n    \r\n    // If we get a valid response, set the state object, or print an error.\r\n    if (users.status === 200) {\r\n      setUsers(users.data.data);\r\n    } else {\r\n      console.log(\"Error retrieving users\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"user-list\">\r\n      {(users || []).map(function (user, index) {\r\n        return <UserCard user={user} key={index} number={index}/>;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserList;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./searchPage.scss\";\r\nimport { DisplayIngredients } from \"app/components\";\r\nimport { useHistory } from \"react-router-dom\";\r\nconst axios = require('axios');\r\n\r\nfunction SearchPage({recipe, setRecipe}){\r\n  const history = useHistory();\r\n  // const [list, setList] = useState('');\r\n  const [userInput, setUserInput] = useState('');\r\n  const [ingredientsList, setIngredientsList] = useState([]);\r\n  const [healthList, setHealthList] = useState([]);\r\n  // function handleChange(e){\r\n  //   console.log(e.target.value);\r\n  // }\r\n    useEffect(() => {\r\n      console.log(ingredientsList);\r\n      console.log(healthList);\r\n    }, [ingredientsList, healthList]);\r\n\r\n    function submit(){\r\n      setIngredientsList([...ingredientsList, userInput]);\r\n      setUserInput('');\r\n    }\r\n    function submitTreeNutFree(){\r\n      setHealthList([...healthList, 'tree-nut-free']);\r\n    }\r\n    function submitAlcoholFree(){\r\n      setHealthList([...healthList, 'alcohol-free']);\r\n    }\r\n    function submitVegetarian(){\r\n      setHealthList([...healthList, 'vegetarian']);\r\n    }\r\n    function submitVegan(){\r\n      setHealthList([...healthList, 'vegan']);\r\n    }\r\n    function submitPeanutFree(){\r\n      setHealthList([...healthList, 'peanut-free']);\r\n    }\r\n    \r\n    /**\r\n     * axios call documentation here: https://www.npmjs.com/package/axios\r\n     * TALK TO BACKEND ON HOW TO CONNECT FROM HERE\r\n     */\r\n    function BIGSubmit(){\r\n      axios.post('http://29e52674266f.ngrok.io/search', {\"ingredients\": ingredientsList, \"healthLabels\": healthList})\r\n      .then(function (response) {\r\n        console.log(response.data);\r\n        let returnedJSONData = response.data;\r\n        setRecipe(returnedJSONData);\r\n        history.push('/recipes');\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });;\r\n      \r\n    }\r\n    \r\n\r\n    const BarStyling = {width:\"20rem\",background:\"#F2F1F9\", border:\"none\", padding:\"0.5rem\"};\r\n\r\n    return (\r\n      <div>\r\n        <div style={{padding:\"20px 0\"}}>\r\n          <h1>ʕ•́ᴥ•̀ʔっ Food Finder cʕ•́ᴥ•̀ʔ</h1>\r\n        </div>\r\n\r\n        <div style={{padding:\"20px 0\"}}>\r\n          <input \r\n            style={BarStyling}\r\n            key=\"random1\"\r\n            placeholder={\"input ingredient\"}\r\n            value={userInput}\r\n            onChange={e => setUserInput(e.target.value)}\r\n          />\r\n        <button style={{margin: \"10px\"}}onClick={submit}>Add Item</button>\r\n        <button onClick={BIGSubmit}>Submit List</button>\r\n        <div style={{padding:\"10px 0\"}}>\r\n          <h3>~ Health Labels ~</h3>\r\n          <button style={{margin: \"10px\"}}onClick={submitPeanutFree}>Peanut-free</button>\r\n          <button style={{margin: \"10px\"}}onClick={submitAlcoholFree}>Alcohol-free</button>\r\n          <button style={{margin: \"10px\"}}onClick={submitTreeNutFree}>Tree-Nut-free</button>\r\n          <button style={{margin: \"10px\"}}onClick={submitVegan}>Vegan</button>\r\n          <button style={{margin: \"10px\"}}onClick={submitVegetarian}>Vegetarian</button>\r\n        </div>\r\n        </div>\r\n        <h3>Your Ingredients and/or Dietary Restrictions:</h3>\r\n        {ingredientsList.map(ingredient => {\r\n          return <DisplayIngredients ingredient={ingredient}/>;\r\n        })}\r\n\r\n        {healthList.map(ingredient => {\r\n          return <DisplayIngredients ingredient={ingredient}/>;\r\n        })}\r\n\r\n        {/* {JSON.stringify(recipes)} */}\r\n      </div>\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default SearchPage;","import React, { useState, useEffect } from \"react\";\r\nimport \"./recipePage.scss\";\r\nimport { DisplayIngredients } from \"app/components\";\r\n\r\nfunction RecipePage({recipe}){\r\n    \r\n    function renderIngredients(){\r\n        const ingredients = Object.keys(recipe);\r\n        return ingredients.map(ingredient => {\r\n            const recipeName = recipe[ingredient];\r\n            return <DisplayIngredients ingredient={recipeName}/>;\r\n        })\r\n    }\r\n    return(\r\n        <div>\r\n            <h1>~ You Should Make ~</h1>\r\n            {renderIngredients()}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default RecipePage;","// React and CSS Imports\r\nimport React, {useState} from \"react\";\r\nimport \"./App.scss\";\r\nimport \"globals/hack-styles.scss\";\r\nimport '../node_modules/react-vis/dist/style.css';\r\n\r\n// Installed dependency imports\r\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n// Website imports for classes you made\r\nimport { UserList } from \"app/views/\";\r\nimport { SearchPage } from \"app/views/\";\r\nimport { RecipePage } from \"app/views/\";\r\n\r\nfunction App() {\r\n  const [recipe, setRecipe] = useState([]);\r\n  return (\r\n    <div className=\"app fill-view\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={\"/zothacks-2020-frontend\"}>\r\n            <SearchPage recipe={recipe} setRecipe={setRecipe}/>\r\n          </Route>\r\n          <Route exact path={\"/recipes\"}>\r\n            <RecipePage recipe={recipe}/>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}